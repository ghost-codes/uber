// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: userMetaData.sql

package db

import (
	"context"
	"time"
)

const createUserMetaData = `-- name: CreateUserMetaData :one
INSERT INTO "userMetaData" (
    id,
    phone_number,
    date_of_birth
) VALUES ( $1, $2,$3 )
RETURNING id, phone_number, date_of_birth, created_date
`

type CreateUserMetaDataParams struct {
	ID          string    `json:"id"`
	PhoneNumber string    `json:"phone_number"`
	DateOfBirth time.Time `json:"date_of_birth"`
}

func (q *Queries) CreateUserMetaData(ctx context.Context, arg CreateUserMetaDataParams) (UserMetaData, error) {
	row := q.db.QueryRowContext(ctx, createUserMetaData, arg.ID, arg.PhoneNumber, arg.DateOfBirth)
	var i UserMetaData
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.CreatedDate,
	)
	return i, err
}

const fetchUserMetaDataByID = `-- name: FetchUserMetaDataByID :one
SELECT id, phone_number, date_of_birth, created_date FROM "userMetaData" 
WHERE id = $1
LIMIT 1
`

func (q *Queries) FetchUserMetaDataByID(ctx context.Context, id string) (UserMetaData, error) {
	row := q.db.QueryRowContext(ctx, fetchUserMetaDataByID, id)
	var i UserMetaData
	err := row.Scan(
		&i.ID,
		&i.PhoneNumber,
		&i.DateOfBirth,
		&i.CreatedDate,
	)
	return i, err
}
