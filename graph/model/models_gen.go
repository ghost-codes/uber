// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	db "github.com/ghost-codes/uber/db/sqlc"
)

type CarLocation struct {
	Location *Location  `json:"location"`
	Driver   *db.Driver `json:"driver"`
	CarType  CarType    `json:"carType"`
}

type CreateUserData struct {
	PhoneNumber    string    `json:"phoneNumber"`
	DateOfBirth    time.Time `json:"dateOfBirth"`
	FirebaseAuthID string    `json:"firebaseAuthId"`
}

type Location struct {
	Lat  float64 `json:"lat"`
	Long float64 `json:"long"`
}

type Session struct {
	User             *db.UserMetaData `json:"user,omitempty"`
	IsSignupComplete bool             `json:"isSignupComplete"`
}

type UserLocation struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

type CarType string

const (
	CarTypeLuxury CarType = "luxury"
	CarTypeFamily CarType = "family"
)

var AllCarType = []CarType{
	CarTypeLuxury,
	CarTypeFamily,
}

func (e CarType) IsValid() bool {
	switch e {
	case CarTypeLuxury, CarTypeFamily:
		return true
	}
	return false
}

func (e CarType) String() string {
	return string(e)
}

func (e *CarType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CarType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CarType", str)
	}
	return nil
}

func (e CarType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Type string

const (
	TypeClient Type = "Client"
	TypeDriver Type = "Driver"
)

var AllType = []Type{
	TypeClient,
	TypeDriver,
}

func (e Type) IsValid() bool {
	switch e {
	case TypeClient, TypeDriver:
		return true
	}
	return false
}

func (e Type) String() string {
	return string(e)
}

func (e *Type) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Type(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Type", str)
	}
	return nil
}

func (e Type) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
