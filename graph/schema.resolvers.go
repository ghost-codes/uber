package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"
	"fmt"
	"math/rand"

	db "github.com/ghost-codes/uber/db/sqlc"
	"github.com/ghost-codes/uber/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, data model.CreateUserData) (*db.UserMetaData, error) {
	args := db.CreateUserMetaDataParams{
        ID: fmt.Sprintf("%d",rand.Intn(1000)),
		DateOfBirth: data.DateOfBirth,
		PhoneNumber: data.PhoneNumber,
	}

	metatData, err := r.Store.CreateUserMetaData(ctx, args)
	return &metatData, err
}

// UserMetaData is the resolver for the userMetaData field.
func (r *queryResolver) UserMetaData(ctx context.Context, id string) (*db.UserMetaData, error) {
    userMetaData,err:=r.Store.FetchUserMetaDataByID(ctx,id);
    return &userMetaData,err;
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
